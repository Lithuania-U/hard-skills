import streamlit as st
import plotly.graph_objects as go
import numpy as np
import pandas as pd
import math
import random

st.set_page_config(page_title="Hard Skills Diagrama", layout="wide")

# --- DUOMENYS ---
def get_skills_data():
    """GrƒÖ≈æina vis≈≥ ƒØg≈´d≈æi≈≥ duomenis kaip (pavadinimas, kampas, maksimalus_lygis) tuple'≈≥ sƒÖra≈°ƒÖ"""
    return [
        ("PSICHOLOGIJA", 310, 8),
        ("MƒÑSTYMAS, FILOSOFIJA", 320, 9),
        ("BIOLOGIJA, NEUROMOKSLAI", 330, 9),
        ("MEDICINOS MOKSLAI", 340, 9),
        ("CHEMIJA, BIOTECHNOLOGIJOS", 350, 10),
        ("MATEMATIKA, KVANTINƒñ FIZIKA", 0, 10),
        ("DIRBTINIS INTELEKTAS, MA≈†IN≈≤ MOKYMAS", 10, 10),
        ("FIZIKA, ELEKTRONIKA, KOMPIUTERIJA", 20, 10),
        ("IN≈ΩINERIJA", 30, 10),
        ("ELEKTROTECHNIKA", 40, 9),
        ("MECHANIKA", 50, 9),
        ("ARCHITEKT≈™RA, MODELIAVIMAS", 60, 9),
        ("STATISTIKA, DUOMENYS", 70, 8),
        ("FINANSAI, EKONOMIKA", 80, 8),
        ("ƒÆSTATYMAI, TEISƒñ", 90, 7),
        ("POLITIKA", 100, 7),
        ("VALD≈ΩIA, VALSTYBƒñ", 110, 7),
        ("RA≈†TAS, SKAIƒåIAI", 120, 6),
        ("AMATAI, PREKYBA", 130, 6),
        ("B≈™STAS, STATYBA", 140, 5),
        ("RELIGIJOS", 150, 5),
        ("KELIONƒñS, ATRADIMAI", 160, 5),
        ("AGRESIJA, DOMINAVIMAS", 170, 4),
        ("FIZINƒñ JƒñGA", 180, 3),
        ("MAISTAS", 190, 3),
        ("SEKSAS, VAIKAI", 200, 2),
        ("≈†ILUMA, BUITIS", 210, 2),
        ("VALGIO RUO≈†IMAS", 220, 3),
        ("GLOBA/R≈™PYBA", 230, 3),
        ("EMPATIJA", 240, 4),
        ("PUO≈†YBA", 250, 4),
        ("MUZIKA, ≈†OKIS", 260, 4),
        ("DRAMATIKA, GINƒåAI", 270, 4),
        ("LITERAT≈™RA", 280, 5),
        ("MEDIA, DIZAINAS", 290, 5),
        ("ISTORIJA, ≈ΩURNALISTIKA", 300, 6)
    ]

def create_circular_diagram(user_skills=None):
    """Sukuria apskritimo diagramƒÖ su ƒØg≈´d≈æi≈≥ duomenimis"""
    skills_data = get_skills_data()
    level_colors = {
        1: "#808080",   # Pilka
        2: "#FFD700",   # Geltona
        3: "#FF69B4",   # Ro≈æinƒó
        4: "#FFA500",   # Oran≈æinƒó
        5: "#FF0000",   # Raudona
        6: "#7CFC00",   # Salotinƒó
        7: "#008000",   # ≈Ωalia
        8: "#4B0082",   # Indigo
        9: "#0000FF",   # Mƒólyna
        10: "#FFFFFF"   # Balta
    }

    fig = go.Figure()
    
    # Fono ƒØg≈´d≈æiai
    for skill_name, angle, level in skills_data:
        theta_rad = math.radians(90 - angle)
        x_line = [0, level * math.cos(theta_rad)]
        y_line = [0, level * math.sin(theta_rad)]
        
        # Linija
        fig.add_trace(go.Scatter(
            x=x_line, y=y_line, 
            mode="lines", 
            line=dict(color=level_colors.get(level, "gray"), width=1), 
            showlegend=False, 
            hoverinfo="skip"
        ))
        
        # Ta≈°kas
        fig.add_trace(go.Scatter(
            x=[level * math.cos(theta_rad)], 
            y=[level * math.sin(theta_rad)],
            mode="markers", 
            marker=dict(
                color=level_colors.get(level, "gray"), 
                size=6, 
                line=dict(color="white", width=1)
            ),
            name=f"FONAS: {skill_name}",
            hovertemplate=f"<b>FONAS: {skill_name}</b><br>Kampas: {angle}¬∞<br>Sudƒótingumas: {level}/10<extra></extra>", 
            showlegend=False
        ))

    # Vartotojo ƒØg≈´d≈æiai
    if user_skills:
        for skill_name, angle, max_level in skills_data:
            user_level = user_skills.get(skill_name, 0)
            if user_level > 0:
                theta_rad = math.radians(90 - angle)
                x_line = [0, user_level * math.cos(theta_rad)]
                y_line = [0, user_level * math.sin(theta_rad)]
                
                # Linija
                fig.add_trace(go.Scatter(
                    x=x_line, y=y_line, 
                    mode="lines", 
                    line=dict(color=level_colors.get(user_level, "#FFF"), width=3), 
                    showlegend=False, 
                    hoverinfo="skip"
                ))
                
                # Ta≈°kas
                fig.add_trace(go.Scatter(
                    x=[user_level * math.cos(theta_rad)], 
                    y=[user_level * math.sin(theta_rad)],
                    mode="markers", 
                    marker=dict(
                        color=level_colors.get(user_level, "#FFF"), 
                        size=12,
                        line=dict(color="white", width=2)
                    ),
                    name=f"Tavo: {skill_name}",
                    hovertemplate=f"<b>TAVO ƒÆVERTINIMAS: {skill_name}</b><br>Kampas: {angle}¬∞<br>Tavo lygis: {user_level}/10<br>Maksimalus: {max_level}/10<extra></extra>", 
                    showlegend=False
                ))

    # Koncentriniai apskritimai
    for r in range(1, 13):
        theta_circle = np.linspace(0, 2 * np.pi, 100)
        x_circle = r * np.cos(theta_circle)
        y_circle = r * np.sin(theta_circle)
        
        circle_color = "orange" if r >= 11 else "gray"
        
        fig.add_trace(go.Scatter(
            x=x_circle, y=y_circle, 
            mode="lines", 
            line=dict(color=circle_color, width=0.5), 
            showlegend=False, 
            hoverinfo="skip"
        ))

    # Radialinƒós linijos kas 5 laipsniai
    for angle in range(0, 360, 5):
        theta_rad = math.radians(90 - angle)
        x_line = [0, 12 * math.cos(theta_rad)]
        y_line = [0, 12 * math.sin(theta_rad)]
        fig.add_trace(go.Scatter(
            x=x_line, y=y_line, 
            mode="lines", 
            line=dict(color="gray", width=0.2),
            showlegend=False, 
            hoverinfo="skip"
        ))

    # Sudƒótingumo laipsniai ant 85 laipsni≈≥ vektoriaus
    for level in range(1, 11):
        theta_rad = math.radians(90 - 85)
        x = level * math.cos(theta_rad)
        y = level * math.sin(theta_rad)
        fig.add_trace(go.Scatter(
            x=[x], y=[y], 
            mode="text", 
            text=[str(level)], 
            textposition="middle center", 
            showlegend=False, 
            hoverinfo="skip", 
            textfont=dict(color="white", size=10, family="Arial Black")
        ))

    # Laipsni≈≥ ≈æymƒós kas 15 laipsni≈≥ ant 11.5 spinduliu apskritimo
    for angle in range(0, 360, 15):
        theta_rad = math.radians(90 - angle)
        x = 11.5 * math.cos(theta_rad)
        y = 11.5 * math.sin(theta_rad)
        fig.add_trace(go.Scatter(
            x=[x], y=[y], 
            mode="text", 
            text=[f"{angle}¬∞"], 
            textposition="middle center", 
            showlegend=False, 
            hoverinfo="skip", 
            textfont=dict(color="lightgray", size=8)
        ))

    # Etiketƒós
    labels = {
        0: "MATEMATINIS, LOGINIS PROTAS",
        90: "ORGANIZACINIS, VALD≈ΩIA",
        180: "FIZINIS, GENAI, JƒñGA",
        270: "JAUSMAI, EMOCIJOS"
    }
    for angle, text in labels.items():
        theta_rad = math.radians(90 - angle)
        x = 13 * math.cos(theta_rad)
        y = 13 * math.sin(theta_rad)
        fig.add_trace(go.Scatter(
            x=[x], y=[y], 
            mode="text", 
            text=[text], 
            textposition="middle center", 
            showlegend=False, 
            hoverinfo="skip", 
            textfont=dict(color="white", size=12)
        ))

    fig.update_layout(
        showlegend=False,
        xaxis=dict(
            range=[-14, 14], 
            showgrid=False, 
            zeroline=False, 
            showticklabels=False, 
            scaleanchor="y", 
            scaleratio=1
        ),
        yaxis=dict(
            range=[-14, 14], 
            showgrid=False, 
            zeroline=False, 
            showticklabels=False
        ),
        plot_bgcolor="black", 
        paper_bgcolor="black",
        width=800, 
        height=800,
        margin=dict(l=50, r=50, t=50, b=50)
    )
    return fig

def render_downloads(fig, user_skills):
    """Atvaizduoja atsisiuntimo mygtukus"""
    col1, col2 = st.columns(2)
    
    with col1:
        # HTML su visa Plotly diagrama
        try:
            html_str = fig.to_html(include_plotlyjs="cdn", full_html=True)
            st.download_button(
                label="üñºÔ∏è Atsisi≈≥sti HTML (diagrama + duomenys)", 
                data=html_str.encode("utf-8"), 
                file_name="hard_skills_diagrama.html", 
                mime="text/html"
            )
        except Exception as e:
            st.error(f"Klaida generuojant HTML: {e}")
    
    with col2:
        # CSV su lentelƒós duomenimis
        try:
            skills = get_skills_data()
            rows = []
            for name, angle, max_level in skills:
                user_level = user_skills.get(name, 0)
                if user_level is None:
                    user_level = 0
                rows.append({
                    "skill": name, 
                    "angle_deg": angle, 
                    "max_level": max_level, 
                    "user_level": int(user_level)
                })
            df = pd.DataFrame(rows)
            csv = df.to_csv(index=False).encode("utf-8")
            st.download_button(
                label="üìÑ Atsisi≈≥sti CSV (duomenys)", 
                data=csv, 
                file_name="hard_skills_data.csv", 
                mime="text/csv"
            )
        except Exception as e:
            st.error(f"Klaida generuojant CSV: {e}")

def main():
    st.title("üéØ Hard Skills Diagrama")
    
    st.markdown("""
    Pabandyk sƒÖ≈æiningai ƒØsivertinti savo gebƒójimus pagal unikaliƒÖ sistemƒÖ, kuri daug ai≈°kiau atskleis, kur esi ir kur nori nukeliauti, lavindamas savo kietuosius ƒØg≈´d≈æius, susijusius su veikla ir profesija. ≈Ωi≈´rƒók, ≈æi≈´rƒók, ir sƒókmƒó greit nusi≈°ypsos.
    
    **Svarbiausias klausimas:** Kuri kryptis tau ar vaikui yra mƒógiama ir kokio lygio tavo pa≈æanga?
    
    I≈°vardintos 36 PROFESINƒñS KRYPTYS. Apytiksliai. Pildyk tas, kurios atrodo svarbiausios ir taip kaip supranti. Arba ƒØvertink visas, tuomet gausi daug detalesnƒØ ataskaitƒÖ ir tikslesni≈≥ patarim≈≥.
    
    ƒåia pirmas etapas i≈° [https://sekmes.lt](https://sekmes.lt) projekto ≈°vietimo tema. Antras etapas bus vartotoj≈≥ profiliai (jei prireiks) ir psichologiniai tipai, o treƒçias - DI agentas, kuris duos neƒØtikƒótinai tiksli≈≥ patarim≈≥. Greit :)
    """)
    
    st.markdown("---")

    skills_data = get_skills_data()

    # Inicializuojame session state
    if "user_skills" not in st.session_state:
        st.session_state.user_skills = {skill[0]: 0 for skill in skills_data}

    if "randomized_skills" not in st.session_state:
        st.session_state.randomized_skills = skills_data.copy()
        random.shuffle(st.session_state.randomized_skills)

    # Diagrama vir≈°uje
    user_skills = st.session_state.user_skills
    fig = create_circular_diagram(user_skills)
    st.plotly_chart(fig, use_container_width=True)
    
    # Statistika
    evaluated_count = len([skill for skill, level in user_skills.items() if level and level > 0])
    total_count = len(skills_data)
    
    st.metric("üìä ƒÆvertinta sriƒçi≈≥", f"{evaluated_count} i≈° {total_count}")
    
    st.markdown("---")

    # Slideriai po diagrama
    st.header("üéØ ƒÆvertink savo gebƒójimus")
    st.markdown("*Nustatyk savo lygƒØ kiekvienai sriƒçiai (0‚Äîmaksimumas)*")
    
    # Mygtukai vir≈°uje
    col1, col2, col3 = st.columns([1, 1, 2])
    with col1:
        if st.button("üî• I≈°valyti visus", use_container_width=True):
            for skill_name, _, _ in skills_data:
                st.session_state.user_skills[skill_name] = 0
            st.rerun()
    
    with col2:
        if st.button("üé≤ Mai≈°yti tvarkƒÖ", use_container_width=True):
            st.session_state.randomized_skills = skills_data.copy()
            random.shuffle(st.session_state.randomized_skills)
            st.rerun()

    # Slideriai 3 stulpeliuose
    col1, col2, col3 = st.columns(3)
    columns = [col1, col2, col3]
    
    for i, (skill_name, angle, max_level) in enumerate(st.session_state.randomized_skills):
        with columns[i % 3]:
            current_value = st.session_state.user_skills.get(skill_name, 0)
            safe_value = min(current_value, max_level) if current_value else 0
            
            # Kompakti≈°kas pavadinimas
            short_name = skill_name.replace(", ", "/")
            if len(short_name) > 30:
                short_name = short_name[:27] + "..."
            
            user_level = st.slider(
                f"{short_name}", 
                min_value=0, 
                max_value=max_level, 
                value=safe_value, 
                key=f"skill_{skill_name}",
                help=f"Pilnas pavadinimas: {skill_name} (max: {max_level})"
            )
            st.session_state.user_skills[skill_name] = user_level

    st.markdown("---")
    
    # Atsisiuntimo mygtukai
    st.header("‚¨áÔ∏è Atsisi≈≥sti duomenis")
    render_downloads(fig, user_skills)

    # Sudƒótingumo lygi≈≥ paai≈°kinimas
    with st.expander("‚ÑπÔ∏è SUDƒñTINGUMO LYGI≈≤ PAAI≈†KINIMAS IR SPALVOS"):
        st.markdown("""
        **1‚Äî10 STIPRUMO (SUDƒñTINGUMO) LYGIAI**

        - ‚ö´ **1 (Pilka)** ‚Äî K≈´dikiai (motorika, aplinkos suvokimas) / 3‚Äî5 m. vaik≈≥ lygis
        - üü° **2 (Geltona)** ‚Äî 6‚Äî13 m. mokini≈≥ teorinƒós ≈æinios, labiau nei praktiniai ƒØg≈´d≈æiai
        - üå∏ **3 (Ro≈æinƒó)** ‚Äî 14‚Äî18 m. jaunimo lygis, stipr≈´s protiniai gebƒójimai, silpnesnƒó praktika
        - üü† **4 (Oran≈æinƒó)** ‚Äî Vidutinis lygis ‚Äî paprasti darbai (Excel, Photoshop, blyn≈≥ kepimas)
        - üî¥ **5 (Raudona)** ‚Äî Mokyklos ‚Äûdevyntukai", vidutinio sudƒótingumo lygis
        - üü¢ **6 (Salotinƒó)** ‚Äî Automechaniko pameistrys, stiprus geimeris, pradedantis k≈´rƒójas
        - üíö **7 (≈Ωalia)** ‚Äî Student≈≥ / jaun≈≥j≈≥ profesional≈≥ lygis (Middle developer)
        - üîÆ **8 (Indigo)** ‚Äî Gyvenimo herojai, nacionalinio lygio senior specialistai
        - üîµ **9 (Mƒólyna)** ‚Äî Auk≈°ƒçiausias meistr≈°i≈°kumas, tarptautini≈≥ projekt≈≥ lygis
        - ‚ö™ **10 (Balta)** ‚Äî Genij≈≥ lygis, pasaulinio masto inovatoriai
        """)

if __name__ == "__main__":
    main()
